// Code generated by GoJay. DO NOT EDIT.

package responses 

import "github.com/francoispqt/gojay"

// UnmarshalJSONObject implements gojay's UnmarshalerJSONObject
func (v *Error) UnmarshalJSONObject(dec *gojay.Decoder, k string) error {
	switch k {
	case "message":
		return dec.String(&v.Message)
	case "code":
		return dec.Int(&v.Code)
	}
	return nil
}

// NKeys returns the number of keys to unmarshal
func (v *Error) NKeys() int { return 2 }

// MarshalJSONObject implements gojay's MarshalerJSONObject
func (v *Error) MarshalJSONObject(enc *gojay.Encoder) {
	enc.StringKey("message", v.Message)
	enc.IntKey("code", v.Code)
}

// IsNil returns wether the structure is nil value or not
func (v *Error) IsNil() bool { return v == nil }

// UnmarshalJSONObject implements gojay's UnmarshalerJSONObject
func (v *BadRequest) UnmarshalJSONObject(dec *gojay.Decoder, k string) error {
	switch k {
	case "ack":
		return dec.Object(&v.Ack)
	case "error":
		if v.Error == nil {
			v.Error = &Error{}
		}
		return dec.Object(v.Error)
	}
	return nil
}

// NKeys returns the number of keys to unmarshal
func (v *BadRequest) NKeys() int { return 1 }

// MarshalJSONObject implements gojay's MarshalerJSONObject
func (v *BadRequest) MarshalJSONObject(enc *gojay.Encoder) {
	enc.ObjectKey("ack", &v.Ack)
	enc.ObjectKey("error", v.Error)
}

// IsNil returns wether the structure is nil value or not
func (v *BadRequest) IsNil() bool { return v == nil }
